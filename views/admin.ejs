<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Painel de Administração</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    /* Fallback básico caso o CSS não carregue */
    body { font-family: Arial, sans-serif; background-color: #f4f4f4; }
    .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
    .section { margin-bottom: 20px; background: white; padding: 15px; border-radius: 5px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .form-group { margin-bottom: 10px; }
    .form-group label { display: block; font-weight: bold; }
    .form-group input { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
    table { width: 100%; border-collapse: collapse; margin-top: 10px; }
    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    th { background-color: #f2f2f2; }
    button { padding: 8px 16px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }
    button:hover { background-color: #45a049; }
    a { color: #0066cc; text-decoration: none; }
    a:hover { text-decoration: underline; }
    .error { color: red; margin-bottom: 20px; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Painel de Administração</h1>
    <% if (error) { %>
      <div class="error"><%= error %></div>
    <% } %>

    <div class="section">
      <h2>Links Fixos</h2>
      <p><a href="/display">Exibição Pública</a></p>
      <p><a href="/sorteador">Sorteador Público</a></p>
      <p><a href="/cartelas-fixas">Todas as 500 Cartelas</a></p>
    </div>

    <div class="section">
      <h2>Atribuir Cartelas</h2>
      <form id="assignCartelasForm">
        <div class="form-group">
          <label for="cartelaNumbers">Números das Cartelas (separados por vírgula)</label>
          <input type="text" id="cartelaNumbers" name="cartelaNumbers" required>
        </div>
        <div class="form-group">
          <label for="playerName">Nome do Jogador</label>
          <input type="text" id="playerName" name="playerName" required>
        </div>
        <div class="form-group">
          <label for="phoneNumber">Número de Telefone</label>
          <input type="text" id="phoneNumber" name="phoneNumber">
        </div>
        <button type="submit">Atribuir</button>
      </form>
    </div>

    <div class="section">
      <h2>Atualizar Prêmio Atual</h2>
      <form id="updatePrizeForm">
        <div class="form-group">
          <label for="currentPrize">Prêmio Atual</label>
          <input type="text" id="currentPrize" name="currentPrize" value="<%= game.currentPrize || '' %>">
        </div>
        <button type="submit">Atualizar Prêmio</button>
      </form>
    </div>

    <div class="section">
      <h2>Último Número Sorteado</h2>
      <p id="lastNumber"><%= game.lastNumberDisplay || '--' %></p>
    </div>

    <div class="section">
      <h2>Números Sorteados</h2>
      <div id="drawnNumbers">
        <p>B (1-15): <span id="numbersB"><%= Array.isArray(game.drawnNumbers) ? game.drawnNumbers.filter(n => n >= 1 && n <= 15).join(', ') || '--' : '--' %></span></p>
        <p>I (16-30): <span id="numbersI"><%= Array.isArray(game.drawnNumbers) ? game.drawnNumbers.filter(n => n >= 16 && n <= 30).join(', ') || '--' : '--' %></span></p>
        <p>N (31-45): <span id="numbersN"><%= Array.isArray(game.drawnNumbers) ? game.drawnNumbers.filter(n => n >= 31 && n <= 45).join(', ') || '--' : '--' %></span></p>
        <p>G (46-60): <span id="numbersG"><%= Array.isArray(game.drawnNumbers) ? game.drawnNumbers.filter(n => n >= 46 && n <= 60).join(', ') || '--' : '--' %></span></p>
        <p>O (61-75): <span id="numbersO"><%= Array.isArray(game.drawnNumbers) ? game.drawnNumbers.filter(n => n >= 61 && n <= 75).join(', ') || '--' : '--' %></span></p>
      </div>
      <form id="drawForm">
        <button type="submit">Sortear Número (Automático)</button>
      </form>
      <form id="markNumberForm">
        <div class="form-group">
          <label for="number">Marcar Número Manual (1-75)</label>
          <input type="number" id="number" name="number" min="1" max="75" required>
        </div>
        <div class="form-group">
          <label for="password">Senha</label>
          <input type="password" id="password" name="password" required>
        </div>
        <button type="submit">Marcar</button>
      </form>
    </div>

    <div class="section">
      <h2>Ações</h2>
      <form id="resetForm" style="display:inline;">
        <button type="submit">Reiniciar o Bingo</button>
      </form>
      <form id="deleteAllForm" style="display:inline;">
        <button type="submit">Excluir Todas as Cartelas</button>
      </form>
      <form id="deleteByPhoneForm" style="display:inline;">
        <input type="text" name="phoneNumber" placeholder="Número de Telefone" required>
        <button type="submit">Excluir por Telefone</button>
      </form>
    </div>

    <div class="section">
      <h2>Jogadores e Links</h2>
      <table>
        <thead>
          <tr>
            <th>Nome</th>
            <th>Telefone</th>
            <th>Cartelas</th>
            <th>Link</th>
            <th>Ação</th>
          </tr>
        </thead>
        <tbody id="playersTable">
          <% players.forEach(player => { %>
            <tr>
              <td><%= player.playerName || '-' %></td>
              <td><%= player.phoneNumber || '-' %></td>
              <td><%= player.cartelaIds.join(', ') || '-' %></td>
              <td><a href="<%= player.link %>" target="_blank">Ver Cartelas</a></td>
              <td><button onclick="copyToClipboard('<%= player.link %>')">Copiar</button></td>
            </tr>
          <% }) %>
          <% if (players.length === 0) { %>
            <tr>
              <td colspan="5">Nenhum jogador registrado</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <div class="section">
      <h2>Vencedores</h2>
      <table>
        <thead>
          <tr>
            <th>Nome</th>
            <th>Telefone</th>
            <th>Cartela</th>
            <th>Link</th>
          </tr>
        </thead>
        <tbody id="winnersTable">
          <% winners.forEach(winner => { %>
            <tr>
              <td><%= winner.playerName || '-' %></td>
              <td><%= winner.phoneNumber || '-' %></td>
              <td><%= winner.cartelaId %></td>
              <td><a href="<%= winner.link %>" target="_blank">Ver</a></td>
            </tr>
          <% }) %>
          <% if (winners.length === 0) { %>
            <tr>
              <td colspan="4">Nenhum vencedor</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    function copyToClipboard(text) {
      navigator.clipboard.writeText(text).then(() => {
        alert('Link copiado para a área de transferência!');
      }).catch(err => {
        console.error('Erro ao copiar link:', err);
        alert('Erro ao copiar o link');
      });
    }

    function submitForm(formId, url, reload = false) {
      const form = document.getElementById(formId);
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        try {
          const formData = new FormData(form);
          let data = Object.fromEntries(formData);
          if (['resetForm', 'deleteAllForm', 'deleteByPhoneForm'].includes(formId)) {
            const password = prompt('Digite a senha:');
            if (!password) return;
            data.password = password;
          }
          const response = await fetch(url, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: { 'Content-Type': 'application/json' }
          });
          const result = await response.json();
          if (result.error) {
            alert(result.error);
          } else if (reload) {
            location.href = '/admin';
          } else if (formId === 'assignCartelasForm') {
            alert(`Cartelas ${result.assigned.join(', ')} atribuídas a ${result.playerName}. Link: ${result.link}`);
            location.href = '/admin';
          }
        } catch (err) {
          console.error(`Erro no ${formId}:`, err);
          alert(`Erro ao executar a ação: ${err.message}`);
        }
      });
    }

    submitForm('drawForm', '/draw');
    submitForm('markNumberForm', '/mark-number');
    submitForm('updatePrizeForm', '/update-prize');
    submitForm('resetForm', '/reset', true);
    submitForm('deleteAllForm', '/delete-all', true);
    submitForm('deleteByPhoneForm', '/delete-by-phone', true);
    submitForm('assignCartelasForm', '/assign-cartelas');

    // WebSocket para atualizações em tempo real
    try {
      const ws = new WebSocket('wss://' + window.location.host);
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          if (data.type === 'update') {
            document.getElementById('lastNumber').textContent = data.game.lastNumberDisplay || '--';
            document.getElementById('numbersB').textContent = Array.isArray(data.game.drawnNumbers) ? data.game.drawnNumbers.filter(n => n >= 1 && n <= 15).join(', ') || '--' : '--';
            document.getElementById('numbersI').textContent = Array.isArray(data.game.drawnNumbers) ? data.game.drawnNumbers.filter(n => n >= 16 && n <= 30).join(', ') || '--' : '--';
            document.getElementById('numbersN').textContent = Array.isArray(data.game.drawnNumbers) ? data.game.drawnNumbers.filter(n => n >= 31 && n <= 45).join(', ') || '--' : '--';
            document.getElementById('numbersG').textContent = Array.isArray(data.game.drawnNumbers) ? data.game.drawnNumbers.filter(n => n >= 46 && n <= 60).join(', ') || '--' : '--';
            document.getElementById('numbersO').textContent = Array.isArray(data.game.drawnNumbers) ? data.game.drawnNumbers.filter(n => n >= 61 && n <= 75).join(', ') || '--' : '--';
            document.getElementById('currentPrize').value = data.game.currentPrize || '';
            // Atualizar tabelas dinamicamente
            fetch('/admin/data').then(res => res.json()).then(data => {
              const winnersTable = document.getElementById('winnersTable');
              winnersTable.innerHTML = data.winners.length > 0
                ? data.winners.map(winner => `
                    <tr>
                      <td>${winner.playerName || '-'}</td>
                      <td>${winner.phoneNumber || '-'}</td>
                      <td>${winner.cartelaId}</td>
                      <td><a href="${winner.link}" target="_blank">Ver</a></td>
                    </tr>
                  `).join('')
                : '<tr><td colspan="4">Nenhum vencedor</td></tr>';
              const playersTable = document.getElementById('playersTable');
              playersTable.innerHTML = data.players.length > 0
                ? data.players.map(player => `
                    <tr>
                      <td>${player.playerName || '-'}</td>
                      <td>${player.phoneNumber || '-'}</td>
                      <td>${player.cartelaIds.join(', ') || '-'}</td>
                      <td><a href="${player.link}" target="_blank">Ver Cartelas</a></td>
                      <td><button onclick="copyToClipboard('${player.link}')">Copiar</button></td>
                    </tr>
                  `).join('')
                : '<tr><td colspan="5">Nenhum jogador registrado</td></tr>';
            }).catch(err => {
              console.error('Erro ao atualizar tabelas:', err);
            });
          }
        } catch (err) {
          console.error('Erro ao processar mensagem WebSocket:', err);
        }
      };
      ws.onerror = (err) => {
        console.error('Erro na conexão WebSocket:', err);
      };
      ws.onclose = () => {
        console.log('Conexão WebSocket fechada, tentando reconectar...');
        setTimeout(() => {
          location.reload();
        }, 5000);
      };
    } catch (err) {
      console.error('Erro ao inicializar WebSocket:', err);
    }
  </script>
</body>
</html>
