<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Painel de Administração - Bingo</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
  <link rel="icon" href="data:;base64,iVBORw0KGgo=">
  <style>
    body {
      background: linear-gradient(135deg, #34d399, #3b82f6);
      font-family: 'Arial', sans-serif;
    }
    .highlight-box {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }
  </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-4xl">
    <h1 class="text-3xl font-bold text-center mb-6 text-green-600">Painel de Administração</h1>
    
    <!-- Gerar Cartela -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Gerar Cartela</h2>
      <form id="generateCartelaForm" class="space-y-4">
        <div>
          <label for="playerName" class="block text-sm font-medium text-gray-700">Nome do Jogador</label>
          <input type="text" id="playerName" name="playerName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
        </div>
        <div>
          <label for="phoneNumber" class="block text-sm font-medium text-gray-700">Número de Telefone (opcional)</label>
          <input type="text" id="phoneNumber" name="phoneNumber" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
        </div>
        <div>
          <label for="quantity" class="block text-sm font-medium text-gray-700">Quantidade de Cartelas</label>
          <input type="number" id="quantity" name="quantity" min="1" value="1" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
        </div>
        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Gerar Cartela(s)</button>
      </form>
    </div>

    <!-- Atualizar Prêmio -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Atualizar Prêmio Atual</h2>
      <form id="updatePrizeForm" class="space-y-4">
        <div>
          <label for="currentPrize" class="block text-sm font-medium text-gray-700">Prêmio Atual</label>
          <input type="text" id="currentPrize" name="currentPrize" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
        </div>
        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Atualizar Prêmio</button>
      </form>
    </div>

    <!-- Atualizar Informações Adicionais -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Atualizar Informações Adicionais</h2>
      <form id="updateInfoForm" class="space-y-4">
        <div>
          <label for="additionalInfo" class="block text-sm font-medium text-gray-700">Informações Adicionais</label>
          <input type="text" id="additionalInfo" name="additionalInfo" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
        </div>
        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Atualizar Informações</button>
      </form>
    </div>

    <!-- Atualizar Mensagem Inicial -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Atualizar Mensagem Inicial</h2>
      <form id="updateStartMessageForm" class="space-y-4">
        <div>
          <label for="startMessage" class="block text-sm font-medium text-gray-700">Mensagem Inicial</label>
          <input type="text" id="startMessage" name="startMessage" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-green-500 focus:border-green-500">
        </div>
        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Atualizar Mensagem</button>
      </form>
    </div>

    <!-- Ações -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Ações</h2>
      <div class="flex space-x-4">
        <button id="drawNumber" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Sortear Número</button>
        <form action="/reset" method="POST">
          <button type="submit" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Reiniciar o Bingo</button>
        </form>
        <button id="deleteAllCartelas" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Excluir Todas as Cartelas</button>
        <button id="deleteByPhone" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">Excluir por Número de Telefone</button>
      </div>
    </div>

    <!-- Modal para Excluir Todas as Cartelas -->
    <div id="deleteAllModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden">
      <div class="bg-white p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold mb-4">Confirmar Exclusão de Todas as Cartelas</h2>
        <form id="deleteAllForm">
          <div class="mb-4">
            <label for="deleteAllPassword" class="block text-sm font-medium text-gray-700">Senha</label>
            <input type="password" id="deleteAllPassword" name="password" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
          </div>
          <div class="flex justify-end space-x-4">
            <button type="button" id="cancelDeleteAll" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg">Cancelar</button>
            <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Excluir</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Modal para Excluir por Número de Telefone -->
    <div id="deletePhoneModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden">
      <div class="bg-white p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold mb-4">Excluir Cartelas por Número de Telefone</h2>
        <form id="deletePhoneForm">
          <div class="mb-4">
            <label for="deletePhoneNumber" class="block text-sm font-medium text-gray-700">Número de Telefone</label>
            <input type="text" id="deletePhoneNumber" name="phoneNumber" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
          </div>
          <div class="mb-4">
            <label for="deletePhonePassword" class="block text-sm font-medium text-gray-700">Senha</label>
            <input type="password" id="deletePhonePassword" name="password" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-red-500 focus:border-red-500">
          </div>
          <div class="flex justify-end space-x-4">
            <button type="button" id="cancelDeletePhone" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg">Cancelar</button>
            <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Excluir</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Jogadores e Links -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Jogadores e Links</h2>
      <table class="w-full border-collapse">
        <thead>
          <tr class="bg-gray-200">
            <th class="border p-2">Nome</th>
            <th class="border p-2">Telefone</th>
            <th class="border p-2">Cartelas</th>
            <th class="border p-2">Link</th>
          </tr>
        </thead>
        <tbody id="playersTable"></tbody>
      </table>
    </div>

    <!-- Vencedores -->
    <div class="highlight-box">
      <h2 class="text-xl font-semibold mb-2 text-gray-700">Vencedores</h2>
      <table class="w-full border-collapse">
        <thead>
          <tr class="bg-gray-200">
            <th class="border p-2">Nome</th>
            <th class="border p-2">Cartela ID</th>
            <th class="border p-2">Data</th>
          </tr>
        </thead>
        <tbody id="winnersTable"></tbody>
      </table>
    </div>
  </div>

  <script>
    // Gerar cartela
    document.getElementById('generateCartelaForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const playerName = document.getElementById('playerName').value;
      const phoneNumber = document.getElementById('phoneNumber').value;
      const quantity = document.getElementById('quantity').value;
      try {
        const res = await fetch('/generate-cartela', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ playerName, phoneNumber, quantity })
        });
        const data = await res.json();
        if (data.error) {
          alert(data.error);
        } else {
          alert(`Cartela(s) gerada(s) com sucesso! Link: ${data.link}`);
        }
        fetchPlayers();
      } catch (err) {
        console.error('Erro ao gerar cartela:', err);
        alert('Erro ao gerar cartela');
      }
    });

    // Atualizar prêmio
    document.getElementById('updatePrizeForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const currentPrize = document.getElementById('currentPrize').value;
      try {
        const res = await fetch('/update-prize', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ currentPrize })
        });
        const data = await res.json();
        if (data.success) {
          alert('Prêmio atualizado com sucesso!');
        } else {
          alert('Erro ao atualizar prêmio');
        }
      } catch (err) {
        console.error('Erro ao atualizar prêmio:', err);
        alert('Erro ao atualizar prêmio');
      }
    });

    // Atualizar informações adicionais
    document.getElementById('updateInfoForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const additionalInfo = document.getElementById('additionalInfo').value;
      try {
        const res = await fetch('/update-info', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ additionalInfo })
        });
        const data = await res.json();
        if (data.success) {
          alert('Informações atualizadas com sucesso!');
        } else {
          alert('Erro ao atualizar informações');
        }
      } catch (err) {
        console.error('Erro ao atualizar informações:', err);
        alert('Erro ao atualizar informações');
      }
    });

    // Atualizar mensagem inicial
    document.getElementById('updateStartMessageForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const startMessage = document.getElementById('startMessage').value;
      try {
        const res = await fetch('/update-start-message', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ startMessage })
        });
        const data = await res.json();
        if (data.success) {
          alert('Mensagem inicial atualizada com sucesso!');
        } else {
          alert('Erro ao atualizar mensagem');
        }
      } catch (err) {
        console.error('Erro ao atualizar mensagem:', err);
        alert('Erro ao atualizar mensagem');
      }
    });

    // Sortear número
    document.getElementById('drawNumber').addEventListener('click', async () => {
      try {
        const res = await fetch('/draw', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const data = await res.json();
        if (data.error) {
          alert(data.error);
        } else {
          fetchWinners();
        }
      } catch (err) {
        console.error('Erro ao sortear número:', err);
        alert('Erro ao sortear número');
      }
    });

    // Excluir todas as cartelas
    document.getElementById('deleteAllCartelas').addEventListener('click', () => {
      document.getElementById('deleteAllModal').classList.remove('hidden');
    });
    document.getElementById('cancelDeleteAll').addEventListener('click', () => {
      document.getElementById('deleteAllModal').classList.add('hidden');
    });
    document.getElementById('deleteAllForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const password = document.getElementById('deleteAllPassword').value;
      try {
        const res = await fetch('/delete-all-cartelas', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password })
        });
        const data = await res.json();
        if (data.success) {
          alert('Todas as cartelas excluídas com sucesso!');
          fetchPlayers();
          fetchWinners();
        } else {
          alert(data.error || 'Erro ao excluir cartelas');
        }
      } catch (err) {
        console.error('Erro ao excluir cartelas:', err);
        alert('Erro ao excluir cartelas');
      }
      document.getElementById('deleteAllModal').classList.add('hidden');
    });

    // Excluir por número de telefone
    document.getElementById('deleteByPhone').addEventListener('click', () => {
      document.getElementById('deletePhoneModal').classList.remove('hidden');
    });
    document.getElementById('cancelDeletePhone').addEventListener('click', () => {
      document.getElementById('deletePhoneModal').classList.add('hidden');
    });
    document.getElementById('deletePhoneForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const phoneNumber = document.getElementById('deletePhoneNumber').value;
      const password = document.getElementById('deletePhonePassword').value;
      try {
        const res = await fetch('/delete-cartelas-by-phone', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ phoneNumber, password })
        });
        const data = await res.json();
        if (data.success) {
          alert('Cartelas excluídas com sucesso!');
          fetchPlayers();
          fetchWinners();
        } else {
          alert(data.error || 'Erro ao excluir cartelas');
        }
      } catch (err) {
        console.error('Erro ao excluir cartelas por telefone:', err);
        alert('Erro ao excluir cartelas');
      }
      document.getElementById('deletePhoneModal').classList.add('hidden');
    });

    // Carregar jogadores
    async function fetchPlayers() {
      try {
        const res = await fetch('/players');
        const players = await res.json();
        const table = document.getElementById('playersTable');
        table.innerHTML = '';
        players.forEach(player => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="border p-2">${player.playerName}</td>
            <td class="border p-2">${player.phoneNumber || '--'}</td>
            <td class="border p-2">${player.cartelaCount}</td>
            <td class="border p-2"><a href="${player.link}" target="_blank" class="text-blue-500 hover:underline">${player.link}</a></td>
          `;
          table.appendChild(row);
        });
      } catch (err) {
        console.error('Erro ao carregar jogadores:', err);
      }
    }

    // Carregar vencedores
    async function fetchWinners() {
      try {
        const res = await fetch('/winners');
        const winners = await res.json();
        const table = document.getElementById('winnersTable');
        table.innerHTML = '';
        winners.forEach(winner => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td class="border p-2">${winner.playerName}</td>
            <td class="border p-2">${winner.cartelaId}</td>
            <td class="border p-2">${new Date(winner.createdAt).toLocaleString()}</td>
          `;
          table.appendChild(row);
        });
      } catch (err) {
        console.error('Erro ao carregar vencedores:', err);
      }
    }

    // Carregar dados iniciais
    fetchPlayers();
    fetchWinners();
  </script>
</body>
</html>
