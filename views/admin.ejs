<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Painel de Sorteio - Bingo</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
  <link rel="icon" href="data:;base64,iVBORw0KGgo=">
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-2xl">
    <h1 class="text-3xl font-bold text-center mb-6">Painel de Sorteio</h1>
    <div class="mb-4">
      <button id="drawButton" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 w-full">Sortear Número</button>
    </div>
    <div class="mb-4">
      <label for="playerName" class="block text-sm font-medium text-gray-700">Nome do Jogador:</label>
      <input type="text" id="playerName" class="mt-1 p-2 border rounded w-full" placeholder="Ex.: João">
      <label for="quantity" class="block text-sm font-medium text-gray-700 mt-2">Quantidade de Cartelas:</label>
      <input type="number" id="quantity" class="mt-1 p-2 border rounded w-full" placeholder="Ex.: 1" min="1" value="1">
      <button id="generateCartelaButton" class="mt-2 bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 w-full">Gerar Cartela(s)</button>
    </div>
    <div class="mb-4">
      <h2 class="text-xl font-semibold">Jogadores e Links</h2>
      <table class="w-full mt-2 border-collapse">
        <thead>
          <tr class="bg-gray-200">
            <th class="border p-2">Nome</th>
            <th class="border p-2">Link</th>
            <th class="border p-2">Ação</th>
          </tr>
        </thead>
        <tbody id="playersTable">
          <% players.forEach(player => { %>
            <tr>
              <td class="border p-2"><%= player.playerName %></td>
              <td class="border p-2"><a href="<%= player.link %>" target="_blank" class="text-blue-600 hover:underline"><%= player.link %></a></td>
              <td class="border p-2">
                <button class="copyLinkButton bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600" data-link="<%= player.link %>">Copiar</button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <div class="mb-4">
      <h2 class="text-xl font-semibold">Cartelas Vencedoras</h2>
      <div id="winners" class="mt-2 text-center"></div>
    </div>
    <div class="mb-4">
      <label for="startMessage" class="block text-sm font-medium text-gray-700">Mensagem Inicial:</label>
      <input type="text" id="startMessage" class="mt-1 p-2 border rounded w-full" placeholder="Ex.: Em Breve o Bingo Irá Começar">
      <button id="updateStartMessageButton" class="mt-2 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 w-full">Atualizar Mensagem Inicial</button>
    </div>
    <div class="mb-4">
      <label for="currentPrize" class="block text-sm font-medium text-gray-700">Prêmio Atual:</label>
      <input type="text" id="currentPrize" class="mt-1 p-2 border rounded w-full" placeholder="Ex.: 1ª Linha, Cartela Cheia">
      <button id="updatePrizeButton" class="mt-2 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 w-full">Atualizar Prêmio</button>
    </div>
    <div class="mb-4">
      <label for="additionalInfo" class="block text-sm font-medium text-gray-700">Informações Adicionais:</label>
      <input type="text" id="additionalInfo" class="mt-1 p-2 border rounded w-full" placeholder="Ex.: Próximo sorteio às 20h">
      <button id="updateInfoButton" class="mt-2 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 w-full">Atualizar Informações</button>
    </div>
    <div class="mt-4">
      <h2 class="text-xl font-semibold">Último Número Sorteado</h2>
      <p id="lastNumber" class="text-4xl font-bold text-center text-blue-600 animate-pulse">--</p>
    </div>
    <div class="mt-4">
      <h2 class="text-xl font-semibold">Números Sorteados por Letra</h2>
      <div id="drawnNumbers" class="mt-2">
        <div class="mb-4">
          <h3 class="text-lg font-semibold">B (1-15)</h3>
          <div id="bNumbers" class="grid grid-cols-5 gap-2"></div>
        </div>
        <div class="mb-4">
          <h3 class="text-lg font-semibold">I (16-30)</h3>
          <div id="iNumbers" class="grid grid-cols-5 gap-2"></div>
        </div>
        <div class="mb-4">
          <h3 class="text-lg font-semibold">N (31-45)</h3>
          <div id="nNumbers" class="grid grid-cols-5 gap-2"></div>
        </div>
        <div class="mb-4">
          <h3 class="text-lg font-semibold">G (46-60)</h3>
          <div id="gNumbers" class="grid grid-cols-5 gap-2"></div>
        </div>
        <div class="mb-4">
          <h3 class="text-lg font-semibold">O (61-75)</h3>
          <div id="oNumbers" class="grid grid-cols-5 gap-2"></div>
        </div>
      </div>
    </div>
  </div>
  <script>
    function getBingoLetter(number) {
      if (number >= 1 && number <= 15) return 'B';
      if (number >= 16 && number <= 30) return 'I';
      if (number >= 31 && number <= 45) return 'N';
      if (number >= 46 && number <= 60) return 'G';
      if (number >= 61 && number <= 75) return 'O';
      return '';
    }

    const ws = new WebSocket('wss://' + window.location.host);
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data.type === 'update') {
        updateUI(data.game, data.winners || []);
      }
    };

    function updateUI(game, winners) {
      document.getElementById('lastNumber').textContent = game.lastNumber ? `${getBingoLetter(game.lastNumber)}-${game.lastNumber}` : '--';
      const bNumbersDiv = document.getElementById('bNumbers');
      const iNumbersDiv = document.getElementById('iNumbers');
      const nNumbersDiv = document.getElementById('nNumbers');
      const gNumbersDiv = document.getElementById('gNumbers');
      const oNumbersDiv = document.getElementById('oNumbers');
      bNumbersDiv.innerHTML = '';
      iNumbersDiv.innerHTML = '';
      nNumbersDiv.innerHTML = '';
      gNumbersDiv.innerHTML = '';
      oNumbersDiv.innerHTML = '';
      const bNumbers = game.drawnNumbers.filter(n => n >= 1 && n <= 15).sort((a, b) => a - b);
      const iNumbers = game.drawnNumbers.filter(n => n >= 16 && n <= 30).sort((a, b) => a - b);
      const nNumbers = game.drawnNumbers.filter(n => n >= 31 && n <= 45).sort((a, b) => a - b);
      const gNumbers = game.drawnNumbers.filter(n => n >= 46 && n <= 60).sort((a, b) => a - b);
      const oNumbers = game.drawnNumbers.filter(n => n >= 61 && n <= 75).sort((a, b) => a - b);
      bNumbers.forEach(num => {
        const numDiv = document.createElement('div');
        numDiv.className = 'bg-gray-200 p-2 rounded text-center';
        numDiv.textContent = `B-${num}`;
        bNumbersDiv.appendChild(numDiv);
      });
      iNumbers.forEach(num => {
        const numDiv = document.createElement('div');
        numDiv.className = 'bg-gray-200 p-2 rounded text-center';
        numDiv.textContent = `I-${num}`;
        iNumbersDiv.appendChild(numDiv);
      });
      nNumbers.forEach(num => {
        const numDiv = document.createElement('div');
        numDiv.className = 'bg-gray-200 p-2 rounded text-center';
        numDiv.textContent = `N-${num}`;
        nNumbersDiv.appendChild(numDiv);
      });
      gNumbers.forEach(num => {
        const numDiv = document.createElement('div');
        numDiv.className = 'bg-gray-200 p-2 rounded text-center';
        numDiv.textContent = `G-${num}`;
        gNumbersDiv.appendChild(numDiv);
      });
      oNumbers.forEach(num => {
        const numDiv = document.createElement('div');
        numDiv.className = 'bg-gray-200 p-2 rounded text-center';
        numDiv.textContent = `O-${num}`;
        oNumbersDiv.appendChild(numDiv);
      });
      document.getElementById('startMessage').value = game.startMessage || 'Em Breve o Bingo Irá Começar';
      document.getElementById('currentPrize').value = game.currentPrize || '';
      document.getElementById('additionalInfo').value = game.additionalInfo || '';
      const winnersDiv = document.getElementById('winners');
      winnersDiv.innerHTML = winners.length > 0 ? `Cartelas Vencedoras: ${winners.join(', ')}` : 'Nenhuma cartela venceu ainda';
    }

    document.getElementById('drawButton').addEventListener('click', async () => {
      const response = await fetch('/draw', { method: 'POST' });
      const data = await response.json();
      if (data.error) {
        alert(data.error);
      }
    });

    document.getElementById('generateCartelaButton').addEventListener('click', async () => {
      const playerName = document.getElementById('playerName').value;
      const quantity = document.getElementById('quantity').value;
      if (!playerName) {
        alert('Por favor, insira o nome do jogador');
        return;
      }
      const response = await fetch('/generate-cartela', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playerName, quantity })
      });
      const data = await response.json();
      if (data.error) {
        alert(data.error);
        return;
      }
      alert(`Cartela(s) gerada(s)!\nLink: ${data.link}`);
      // Atualizar a tabela de jogadores
      const playersResponse = await fetch('/players');
      const players = await playersResponse.json();
      const playersTable = document.getElementById('playersTable');
      playersTable.innerHTML = players.map(player => `
        <tr>
          <td class="border p-2">${player.playerName}</td>
          <td class="border p-2"><a href="${player.link}" target="_blank" class="text-blue-600 hover:underline">${player.link}</a></td>
          <td class="border p-2">
            <button class="copyLinkButton bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600" data-link="${player.link}">Copiar</button>
          </td>
        </tr>
      `).join('');
    });

    document.getElementById('updateStartMessageButton').addEventListener('click', async () => {
      const startMessage = document.getElementById('startMessage').value;
      await fetch('/update-start-message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ startMessage })
      });
    });

    document.getElementById('updatePrizeButton').addEventListener('click', async () => {
      const currentPrize = document.getElementById('currentPrize').value;
      await fetch('/update-prize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ currentPrize })
      });
    });

    document.getElementById('updateInfoButton').addEventListener('click', async () => {
      const additionalInfo = document.getElementById('additionalInfo').value;
      await fetch('/update-info', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ additionalInfo })
      });
    });

    // Função para copiar links
    document.addEventListener('click', (event) => {
      if (event.target.classList.contains('copyLinkButton')) {
        const link = event.target.dataset.link;
        navigator.clipboard.writeText(link).then(() => {
          alert('Link copiado para a área de transferência!');
        });
      }
    });

    // Carregar estado inicial
    fetch('/game').then(res => res.json()).then(game => updateUI(game, []));
  </script>
</body>
</html>
