<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cartelas do Bingo</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
  <style>
    body { background: linear-gradient(135deg, #34d399, #3b82f6); font-family: Arial, sans-serif; }
    .cartela-container { background: white; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.2); padding: 1.5rem; margin-bottom: 2rem; }
    .cartela-table { border-collapse: separate; border-spacing: 0; width: 100%; }
    .cartela-table th { background: #10b981; color: white; padding: 0.75rem; font-size: 1.25rem; }
    .cartela-table td { background: #f3f4f6; border: 2px solid #e5e7eb; padding: 0.75rem; font-size: 1.1rem; font-weight: bold; transition: background 0.3s; text-align: center; }
    .cartela-table td.marked { background: #facc15; color: #1f2937; }
    .cartela-table td.free { background: #60a5fa; color: white; }
    .highlight-box { background: rgba(255,255,255,0.9); border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.2); padding: 1.5rem; margin-bottom: 1.5rem; }
  </style>
</head>
<body class="flex items-center justify-center min-h-screen">
  <div class="w-full max-w-5xl p-6">
    <h1 class="text-4xl font-bold text-center mb-6 text-white drop-shadow-lg"><%= playerName || 'Cartelas do Bingo' %></h1>

    <!-- Ãšltimo NÃºmero Sorteado -->
    <div class="highlight-box">
      <h2 class="text-2xl font-semibold text-center text-gray-700">Ãšltimo NÃºmero Sorteado</h2>
      <p id="lastNumber" class="text-5xl font-bold text-center text-red-600"><%= game.lastNumberDisplay || '--' %></p>
    </div>

    <!-- PrÃªmio Atual -->
    <div class="highlight-box">
      <h2 class="text-2xl font-semibold text-center text-gray-700">PrÃªmio Atual</h2>
      <p id="currentPrize" class="text-2xl text-center text-gray-900"><%= game.currentPrize || '--' %></p>
    </div>

    <% if (cartelas && Array.isArray(cartelas) && cartelas.length > 0) { %>
      <% cartelas.forEach((cartela, index) => { %>
        <div class="cartela-container">
          <h2 class="text-xl font-semibold mb-2 text-gray-700">Cartela <%= index + 1 %> (ID: <%= cartela.cartelaId || 'N/A' %>)</h2>
          <div id="winnerMessage-<%= cartela.cartelaId || 'unknown' %>" class="text-2xl font-bold text-center text-green-600 hidden mb-4">ðŸŽ‰ ParabÃ©ns! Esta cartela venceu!</div>
          <table class="cartela-table" id="table-<%= cartela.cartelaId || 'unknown' %>">
            <thead>
              <tr>
                <th>B</th><th>I</th><th>N</th><th>G</th><th>O</th>
              </tr>
            </thead>
            <tbody>
              <% for (let row = 0; row < 5; row++) { %>
                <tr>
                  <% for (let col = 0; col < 5; col++) { %>
                    <td class="<%= cartela.numbers && cartela.numbers[col] && cartela.numbers[col][row] === 0 ? 'free' : (cartela.markedNumbers && cartela.markedNumbers.includes(cartela.numbers[col][row]) ? 'marked' : '') %>">
                      <%= cartela.numbers && cartela.numbers[col] && cartela.numbers[col][row] === 0 ? 'X' : (cartela.numbers && cartela.numbers[col] ? cartela.numbers[col][row] : '-') %>
                    </td>
                  <% } %>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      <% }) %>
    <% } else { %>
      <div class="highlight-box">
        <p class="text-xl text-center text-gray-700">Nenhuma cartela disponÃ­vel</p>
      </div>
    <% } %>
  </div>

  <script>
    const cartelasData = <%- JSON.stringify(cartelas || []) %>;
    // winners iniciais vindos do servidor (pode estar vazio)
    const initialWinners = <%- JSON.stringify(winners || []) %>;

    const ws = new WebSocket('wss://' + window.location.host);
    ws.onopen = () => console.log('ConexÃ£o WebSocket estabelecida');
    ws.onmessage = e => {
      try {
        const data = JSON.parse(e.data);
        if (data.type === 'update') {
          updateUI(data.game || {}, data.winners || []);
        }
      } catch (error) {
        console.error('Erro ao processar mensagem WebSocket (cartelas):', error);
      }
    };
    ws.onerror = (error) => console.error('Erro no WebSocket (cartelas):', error);
    ws.onclose = () => console.log('ConexÃ£o WebSocket fechada');

    function updateUI(game, winners) {
      document.getElementById('lastNumber').textContent = game.lastNumberDisplay || '--';
      document.getElementById('currentPrize').textContent = game.currentPrize && game.currentPrize.trim() ? game.currentPrize : '--';

      cartelasData.forEach(cartela => {
        const winnerMsg = document.getElementById(`winnerMessage-${cartela.cartelaId || 'unknown'}`);
        if (winnerMsg) {
          // ESSE TRECHO: se o jogo foi reiniciado (nenhum nÃºmero sorteado), escondemos o aviso
          if (!game.drawnNumbers || game.drawnNumbers.length === 0) {
            winnerMsg.classList.add('hidden');
          } else if (winners.some(w => w.cartelaId === cartela.cartelaId)) {
            winnerMsg.classList.remove('hidden');
          } else {
            winnerMsg.classList.add('hidden');
          }
        }

        // Atualizar nÃºmeros marcados conforme drawnNumbers
        if (game.drawnNumbers && cartela.numbers) {
          const table = document.getElementById(`table-${cartela.cartelaId || 'unknown'}`);
          if (table) {
            for (let row = 0; row < 5; row++) {
              for (let col = 0; col < 5; col++) {
                const cell = table.rows[row + 1].cells[col];
                const number = cartela.numbers[col][row];
                if (number !== 0 && game.drawnNumbers.includes(number)) {
                  cell.classList.add('marked');
                } else if (number !== 0) {
                  cell.classList.remove('marked');
                } else {
                  // Ã© o espaÃ§o livre (0) â€” mantÃ©m classe 'free'
                  cell.classList.add('free');
                }
              }
            }
          }
        } else {
          // Se nÃ£o hÃ¡ drawnNumbers (por exemplo apÃ³s reset), remove 'marked' de todas as cÃ©lulas
          const table = document.getElementById(`table-${cartela.cartelaId || 'unknown'}`);
          if (table) {
            for (let row = 0; row < 5; row++) {
              for (let col = 0; col < 5; col++) {
                const cell = table.rows[row + 1].cells[col];
                cell.classList.remove('marked');
                const number = cartela.numbers[col][row];
                if (number === 0) cell.classList.add('free');
                else cell.classList.remove('free');
              }
            }
          }
        }
      });
    }

    // Inicializa o UI com winners iniciais (quando a pÃ¡gina Ã© carregada)
    fetch('/game', { headers: { 'Accept': 'application/json' } })
      .then(res => res.json())
      .then(game => updateUI(game || {}, initialWinners || []))
      .catch(error => {
        console.error('Erro ao carregar dados do jogo (cartelas):', error);
        document.getElementById('lastNumber').textContent = '--';
        document.getElementById('currentPrize').textContent = '--';
      });
  </script>
</body>
</html>
