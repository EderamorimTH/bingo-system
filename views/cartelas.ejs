<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cartelas</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="container">
    <h1>Cartelas</h1>

    <div class="game-info">
      <h2>Prêmio Atual</h2>
      <p id="currentPrize"><%= game.currentPrize || '--' %></p>
    </div>

    <div class="game-info">
      <h2>Informações Adicionais</h2>
      <p id="additionalInfo"><%= game.additionalInfo || '--' %></p>
    </div>

    <% cartelas.forEach(cartela => { %>
      <div class="cartela">
        <h2>Cartela <%= cartela.cartelaId %> (ID: <%= cartela.cartelaId %>)</h2>
        <% if (cartela.markedNumbers.length > 0 && cartela.markedNumbers.every(num => cartela.numbers.flat().includes(num) || num === 0)) { %>
          <p class="winner">Parabéns! Esta cartela venceu!</p>
        <% } %>
        <table>
          <thead>
            <tr>
              <th>B</th>
              <th>I</th>
              <th>N</th>
              <th>G</th>
              <th>O</th>
            </tr>
          </thead>
          <tbody>
            <% for (let row = 0; row < 5; row++) { %>
              <tr>
                <% for (let col = 0; col < 5; col++) { %>
                  <td class="<%= cartela.markedNumbers.includes(cartela.numbers[col][row]) || (col === 2 && row === 2 && cartela.numbers[col][row] === 0) ? 'marked' : '' %>">
                    <%= cartela.numbers[col][row] === 0 ? 'FREE' : cartela.numbers[col][row] %>
                  </td>
                <% } %>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    <% }) %>
  </div>

  <script>
    // Conectar ao WebSocket
    const ws = new WebSocket(`ws://${window.location.host}`);

    ws.onopen = () => {
      console.log('Conectado ao WebSocket');
    };

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      console.log('Mensagem recebida do WebSocket:', data);

      if (data.type === 'update') {
        // Atualizar informações do jogo
        document.getElementById('currentPrize').textContent = data.game.currentPrize || '--';
        document.getElementById('additionalInfo').textContent = data.game.additionalInfo || '--';

        // Atualizar números marcados nas cartelas
        const cartelas = document.querySelectorAll('.cartela');
        cartelas.forEach(cartelaElement => {
          const cartelaId = cartelaElement.querySelector('h2').textContent.split('(ID: ')[1].slice(0, -1);
          const cells = cartelaElement.querySelectorAll('td');

          // Obter números da cartela do DOM
          const numbers = [];
          cells.forEach(cell => {
            const text = cell.textContent.trim();
            numbers.push(text === 'FREE' ? 0 : parseInt(text) || 0);
          });

          // Marcar números sorteados
          data.game.drawnNumbers.forEach(number => {
            const index = numbers.indexOf(number);
            if (index !== -1) {
              cells[index].classList.add('marked');
            }
          });

          // Verificar se a cartela venceu
          const markedNumbers = data.game.drawnNumbers.filter(num => numbers.includes(num) || num === 0);
          if (checkWin(numbers, markedNumbers)) {
            let winnerMessage = cartelaElement.querySelector('.winner');
            if (!winnerMessage) {
              winnerMessage = document.createElement('p');
              winnerMessage.className = 'winner';
              winnerMessage.textContent = 'Parabéns! Esta cartela venceu!';
              cartelaElement.insertBefore(winnerMessage, cartelaElement.querySelector('table'));
            }
          }
        });
      }
    };

    ws.onerror = (error) => {
      console.error('Erro no WebSocket:', error);
    };

    ws.onclose = () => {
      console.log('WebSocket desconectado');
    };

    // Função para verificar vitória (linha horizontal)
    function checkWin(numbers, markedNumbers) {
      const matrix = [];
      for (let i = 0; i < 5; i++) {
        matrix.push(numbers.slice(i * 5, (i + 1) * 5));
      }
      for (let row = 0; row < 5; row++) {
        let markedInRow = 0;
        for (let col = 0; col < 5; col++) {
          const num = matrix[row][col];
          if (num === 0 || markedNumbers.includes(num)) {
            markedInRow++;
          }
        }
        if (markedInRow === 5) {
          return true;
        }
      }
      return false;
    }
  </script>
</body>
</html>
